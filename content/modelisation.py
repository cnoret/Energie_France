import streamlit as st
import joblib 
import pandas as pd
from datetime import datetime

def modelisation():
    st.title("Mod√©lisation et pr√©dictions")
    st.image("images/ML.png", width= 250)

    #Instructions
    st.info("Nous avons entra√Æn√© deux mod√®les, qui permettent de faire des pr√©dictions sur la consommation d'√©lectricit√© en France. Vous devez s√©lectionner un des mod√®les, puis une date pour obtenir une pr√©diction.", icon= "ü§ñ")

    # Charger les donn√©es depuis un fichier CSV ("temp.csv" dans votre cas)
    temp = pd.read_csv("datasets/temp.csv", sep = ';')

    # Convertir la colonne 'Date' en format de date
    temp['Date'] = pd.to_datetime(temp['Date'], format='%d/%m/%Y')

    # Cr√©er une application Streamlit
    st.title("Calcul de moyenne de temp√©rature pour une date future")

    # S√©lection de la date future
    date_future = st.date_input("S√©lectionnez une date future", min_value=temp['Date'].max())

    # S√©lection de la r√©gion
    regions = temp['R√©gion'].unique()
    selected_region = st.selectbox("S√©lectionnez une r√©gion", regions)

    # Filtrage des donn√©es pour la r√©gion
    filtered_data = temp[temp['R√©gion'] == selected_region]

    # Date de la date future (jour et mois)
    date_future_month_day = date_future.strftime('%m-%d')

    # Liste des ann√©es √† consid√©rer
    annees = [2016, 2017, 2018, 2019, 2020, 2021]

    # Calcul des moyennes pour la m√™me date sur les ann√©es sp√©cifi√©es
    moyennes_tmin = []
    moyennes_tmax = []
    moyennes_tmoy = []

    for annee in annees:
        date_annee = datetime(annee, date_future.month, date_future.day)
        filtered_data_annee = filtered_data[filtered_data['Date'].dt.month == date_annee.month]
        filtered_data_annee = filtered_data_annee[filtered_data_annee['Date'].dt.day == date_annee.day]
        moyennes_tmin.append(filtered_data_annee['TMin (¬∞C)'].mean())
        moyennes_tmax.append(filtered_data_annee['TMax (¬∞C)'].mean())
        moyennes_tmoy.append(filtered_data_annee['TMoy (¬∞C)'].mean())

    # Afficher les r√©sultats
    st.write(f"Moyenne TMin pour {selected_region} le {date_future.strftime('%d/%m')}:")
    for i, annee in enumerate(annees):
        st.write(f"{annee}: {moyennes_tmin[i]:.2f} ¬∞C")

    st.write(f"Moyenne TMax pour {selected_region} le {date_future.strftime('%d/%m')}:")
    for i, annee in enumerate(annees):
        st.write(f"{annee}: {moyennes_tmax[i]:.2f} ¬∞C")

    st.write(f"Moyenne TMoy pour {selected_region} le {date_future.strftime('%d/%m')}:")
    for i, annee in enumerate(annees):
        st.write(f"{annee}: {moyennes_tmoy[i]:.2f} ¬∞C")









    # #Selection du mod√®le
    # choix_modele = st.selectbox("Choix du mod√®le", ['R√©gression Lin√©aire', 'Ridge'])

    # # S√©lection de la date
    # selected_date = st.date_input('Date pour la pr√©diction', value="today", min_value=None, max_value=None, key=None, help=None, on_change=None, args=None, kwargs=None, format="DD/MM/YYYY", disabled=False, label_visibility="visible")

    # if choix_modele == 'R√©gression Lin√©aire':
    #     # Import mod√®le
    #     model_reglin = joblib.load(filename="./models/line_reg_model_full.joblib")

    #     # Prediction
    #     prediction = model_reglin.predict(selected_date)
    #     st.write(f"R√©sultat de la pr√©diction: {prediction}")

    # elif choix_modele == 'Ridge':
    #     # Import mod√®le
    #     model_ridge = joblib.load(filename="./models/ridge_model_full.joblib")

    #     # Prediction
    #     prediction = model_ridge.predict(selected_date)
    #     st.write(f"R√©sultat de la pr√©diction: {prediction}")