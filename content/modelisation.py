import datetime
import streamlit as st
import joblib
import numpy as np

def preprocess():
    pass

def get_user_input():
    "Collecte des donn√©es fournies par l'utilisateur"
    # S√©lection du mod√®le
    choix_modele = st.selectbox("Choisissez un mod√®le", ["R√©gression Lin√©aire", "R√©gression Ridge"])

    st.subheader("Choix de la date et de la r√©gion")
    # Collecte des entr√©es de l'utilisateur
    region = st.selectbox("R√©gion", [
        "Auvergne-Rh√¥ne-Alpes", 
        "Bourgogne-Franche-Comt√©", 
        "Bretagne", 
        "Centre-Val de Loire", 
        "Grand Est", 
        "Hauts-de-France", 
        "√éle-de-France", 
        "Normandie", 
        "Nouvelle-Aquitaine", 
        "Occitanie", 
        "Pays de la Loire", 
        "Provence-Alpes-C√¥te d'Azur"
    ])
    
    # Choix de la date
    date = st.date_input('Date pour la pr√©diction', value = datetime.date.today(),
                                  min_value=None, max_value=None, key=None, help=None, 
                                  on_change=None, args=None, kwargs=None, format="DD/MM/YYYY", 
                                  disabled=False, label_visibility="visible")

    # Choix de l'heure
    heure = st.time_input("Heure", datetime.datetime.now())

    # Calcul de sin_heure et cos_heure
    heure_decimal = heure.hour + heure.minute / 60.0
    sin_heure = np.sin(2 * np.pi * heure_decimal / 24)
    cos_heure = np.cos(2 * np.pi * heure_decimal / 24)
    
    st.subheader("S√©lection des temp√©ratures")
    # S√©lection des temp√©ratures minimale, moyenne et maximale
    tmin = st.number_input("Temp√©rature minimale (¬∞C)")
    tmoy = st.number_input("Temp√©rature moyenne (¬∞C)")
    tmax = st.number_input("Temp√©rature maximale (¬∞C)")

    # Convertir la date en : Jour, Mois, Jour_mois, Ann√©e
    jour = date.strftime("%A")
    mois = date.strftime("%B")
    jour_mois = date.day
    annee = date.year

    # Dictionnaire avec les entr√©es de l'utilisateur
    user_input = {
        "R√©gion": region,
        "Jour": jour,
        "Mois": mois,
        "Jour_mois": jour_mois,
        "Ann√©e": annee,
        "TMin (¬∞C)": tmin,
        "TMax (¬∞C)": tmax,
        "TMoy (¬∞C)": tmoy,
        "sin_heure": sin_heure,
        "cos_heure": cos_heure,
    }
    return choix_modele, user_input

def modelisation():
    "Page de pr√©diction de l'application Streamlit"
    st.title("Mod√©lisation et pr√©dictions")
    st.image("images/ML.png", width = 250)
    st.subheader("Machine Learning")
    st.info("Nous avons entra√Æn√© deux mod√®les, qui permettent de faire des pr√©dictions sur la \
            consommation d'√©lectricit√© en France : la r√©gression lin√©aire et la r√©gression Ridge.\n \
            Vous devez s√©lectionner un des mod√®les, puis choisir une date et des temp√©ratures afin \
            pr√©dire la consommation en MW de cette future journ√©e.", icon = "ü§ñ")

    choix_modele, user_input = get_user_input()
    if st.button('Pr√©dire la consommation √©lectrique'):
        # Pr√©traitement des entr√©es de l'utilisateur
        features = preprocess(user_input)

        # S√©lection du mod√®le et pr√©diction
        if choix_modele == 'R√©gression Lin√©aire':
            model = joblib.load("models/line_reg_model_full.joblib")
        elif choix_modele == 'R√©gression Ridge':
            model = joblib.load("models/ridge_model_full.joblib")

        # Pr√©diction de la consommation d'√©nergie
        prediction = model.predict(features)
        st.write(f"R√©sultat de la pr√©diction: {prediction[0]} MW")

        # PLACEHOLDER METRICS
        # PLACEHOLDER EXPLICATION
    